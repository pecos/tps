#!./bats
# -*- mode: sh -*-

TEST="valgrind"
RUNFILE="inputs/input.dtconst.2iters.cyl.ini"
LOMACH_RUNFILE="inputs/lomach.tgv2d.ini"
HEAT_RUNFILE="inputs/input.heatedBox.ini"
RUNFILE_AVG="inputs/input.cyl-2d.caseA.ini"
EXE="../src/tps"
LIBTOOL_RUN="../libtool --mode=execute"
VALGRIND="valgrind --suppressions=valgrind.suppressions --tool=memcheck --leak-check=full --error-exitcode=1"

setup() {
    OPTS=""
##    config="../tps_config.h"
##    if [ -e ${config} ];then
##        run grep -q "^#define HAVE_LIBCUDA 1" ${config}
##        if [ "${status}" -eq 0 ];then
##            OPTS="${OPTS} -d cuda"
##        fi
##    fi
}

@test "[$TEST] verify valgrind detects known error" {
    test -e ./uninit
    run valgrind --error-exitcode=1 ./uninit
    [[ "${status}" -eq 1 ]]
}

@test "[$TEST] run tps with input -> $RUNFILE under valgrind" {
    test -s $RUNFILE

    # use following option to generate suppression list if needed
    # for things not in TPS (I'm talking about you MPICH).
    #valgrind--gen-suppressions=all
    #valgrind --suppressions=valgrind.suppressions --error-exitcode=1 ../src/tps $OPTS --runFile $RUNFILE
    $LIBTOOL_RUN $VALGRIND $EXE --runFile $RUNFILE
}

@test "[$TEST] run tps with input -> $LOMACH_RUNFILE under valgrind" {
    test -s $LOMACH_RUNFILE
    $LIBTOOL_RUN $VALGRIND $EXE -run $LOMACH_RUNFILE
}

@test "[$TEST] run tps with input -> $HEAT_RUNFILE under valgrind" {
    test -s $HEAT_RUNFILE

    # reduce number of steps, just for brevity of run
    cat $HEAT_RUNFILE | sed 's/maxIters = 5000/maxIters = 5/' > tmp.runfile.ini
    run $LIBTOOL_RUN $VALGRIND $EXE -run tmp.runfile.ini
    rm tmp.runfile.ini
    [[ "${status}" -eq 0 ]]
}

@test "[$TEST] run tps with input -> $RUNFILE_AVG under valgrind" {
    test -s $RUNFILE_AVG
    $LIBTOOL_RUN $VALGRIND $EXE -run $RUNFILE_AVG
}
