# Example TPS runtime inputs

[solver]
type = flow    # options are [flow, em, coupled (TODO)]

[flow]
mesh = square_periodic_mesh.msh
order = 3
integrationRule = 1
basisType = 1
maxIters = 10500
outputFreq = 100
useRoe = 1
enableSummationByParts = 1
viscosityMultiplier = 45000.
bulkViscosityMultiplier = 5.
refLength = 1.
equation_system = euler
enablePressureForcing = True
pressureGrad = '8 0 0'
# support fluid presets:
# --> dry_air (default)
# --> test_binary_air
# --> user_defined
fluid = user_defined

[io]
outdirBase = euler_output
enableRestart = True
# supported restart modes:
# --> standard (default)
# --> singleFileWrite
# --> singleFileRead
# --> variableP (change polynomial order)
restartMode = variableP

[jobManagement]
enableAutoRestart = True
timeThreshold = 1000
checkFreq = 500

[averaging]
startIter = 12400
sampleFreq = 20
saveMeanHist = True
enableContinuation = True

[time]
cfl = 0.12
enableConstantTimestep = True
# possible time integators
# --> forwardEuler
# --> RK2, RK3, RK4, RK6
integrator = rk4

[initialConditions]
rho = 1.2
rhoU = 30.
rhoV = 0.
rhoW = 0.
pressure = 101300

[viscosityMultiplierFunction]
isEnabled = True
norm = 'n1 n2 n3'
p0 = 'x0 y0 z0'
pInit = 'xi yi zi'
viscosityRatio = 50.

[spongezone]
numSpongeZones = 2

[spongezone1]
# current allowed types:
# --> planar
# --> annulus
type = planar
normal = 'n1 n2 n3'
p0 = 'x0 y0 z0'
pInit = 'xi yi zi'
targetSolType = userDef
density = rho
uvw = 'u v w'
pressure = p

[spongezone2]
type = annulus
normal = 'n1 n2 n3'
p0 = 'x0 y0 z0'
pInit = 'xi yi zi'
r1 = 1.
r2 = 2.
targetSolType = mixedOut

[heatSource]
numHeatSources = 1

[heatSource1]
isEnabled = True
value = 10.   # {watts/m^3}
distribution = cylinder
radius = 5.
point1 = 'x1 y1 z1'
point2 = 'x2 y2 z2'

[boundaryConditions]
numWalls = 2
numInlets = 1
numOutlets = 1

[boundaryConditions/inlet1]
patch = 5
# available inlet types
# --> subsonic
# --> nonReflecting
# --> nonReflectingConstEntropy
type = subsonic
density = 1.2
uvw = '30 0 0'

[boundaryConditions/outlet1]
patch = 5
# available outlet types
# --> subsonicPressure
# --> nonReflectingPressure
# --> nonReflectingMassFlow
# --> nonReflectingPointBasedMassFlow
type = subsonicPressure
pressure = 101300

[boundaryConditions/wall1]
patch = 8
# available wall BC types
# --> inviscid
# --> viscous_adiabatic
# --> viscous_isothermal
type = inviscid

[boundaryConditions/wall2]
patch = 9
type = viscous_isothermal
temperature = 430

[passiveScalars]
numScalars = 1

[passiveScalar1]
xyz = '0. 0. 0.'
radius = 0.1
value = 1

[plasma_models]
ambipolar = True
two_temperature = False
# available gas_model types
# --> perfect_mixture
gas_model = perfect_mixture
# No available models yet for transport/chemistry model.
transport_model = n/a
chemistry_model = n/a

[species]
numSpecies = 3
# For now, input parser enforces background_index to be the last.
# electron_index is enforced to be the second to last.
background_index = 3
electron_index = 2

[species/species1]
# TODO: transport properties (binary diffusivity) will require species/name. will be implemented.
molecular_weight = 1.0
charge_number = 1.0
# if gas_model is perfect_mixture, requires heat capacities from input.
# molar heat capacities in unit of universal gas constant.
constant_molar_cv = 1.5
constant_molar_cp = 2.5

[species/species2]
# make sure the second to last species is electron.
molecular_weight = 1.0
charge_number = -1.0
constant_molar_cv = 1.5
constant_molar_cp = 2.5

[species/species3]
# make sure the last species is background species.
molecular_weight = 1.0
charge_number = 0.0
constant_molar_cv = 1.5
constant_molar_cp = 2.5

[reactions]
number_of_reactions = 1

[reactions/reaction1]
# Similar format as cantera equation.
# Species: atoms and electron are written with one capital. (argon: A, electron: E, oxygen molecule: O2, ...)
# Non-neutral species are followed by a string format '.%c%d', with %c (+,-,e) indicating type (cation, anion, excited) and %d its level.
# Electron is simply specified as 'e'.
# Example: (Ar.+1, e, Ar.e1, OH.-1, ...)
# Example reaction: electron-impact ionization
equation = 'Ar + e <=> Ar.+1 + 2 e'
# Space is important. Wrong expression: 'Ar + e <=> Ar.+1 + 2e', 'Ar + e <=> Ar.+1 +2 e', ...
# NOTE: 'e + Ar <=> Ar.+1 + 2 e' must be an equivalent reaction, but the current code will not take it as such.
# TODO: parse this equation to identify reaction index. For now, equation is taken as a whole.

# stoichiometry_left/right specifies coefficients of species in the reaction equation, left and right-hand side.
# must specify a vector with the size of species/numSpecies.
stoichiometry_left = '0 1 1'
stoichiometry_right = '1 2 0'
