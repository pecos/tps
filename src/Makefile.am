AM_CPPFLAGS  = -g $(MFEM_CXXFLAGS) $(HDF5_CFLAGS) $(GRVY_CFLAGS)

if CUDA_ENABLED
AM_CPPFLAGS += -dc $(CUDA_CXXFLAGS)
endif

if HIP_ENABLED
AM_CPPFLAGS += -fgpu-rdc $(HIP_CXXFLAGS)
endif

if MASA_ENABLED
AM_CPPFLAGS += $(MASA_CXXFLAGS)
endif

if GSL_ENABLED
AM_CPPFLAGS += $(GSL_CFLAGS)
endif

tps_LDFLAGS=

# C++ main solver binary
bin_PROGRAMS         = tps
tps_SOURCES          = main.cpp
tps_LDADD            = libtps.la
tps_LDFLAGS         += $(MPI4PY_LIBS) $(PYTHON_LIBS) $(MFEM_LIBS)

if HIP_ENABLED
tps_LDFLAGS += -fgpu-rdc
endif

# C++ solver library sources
cxx_sources          = averaging.cpp faceGradientIntegration.cpp M2ulPhyS.cpp rhs_operator.cpp wallBC.cpp \
		       BCintegrator.cpp face_integrator.cpp riemann_solver.cpp BoundaryCondition.cpp fluxes.cpp \
                       masa_handler.cpp run_configuration.cpp domain_integrator.cpp forcing_terms.cpp mpi_groups.cpp \
	               equation_of_state.cpp transport_properties.cpp inletBC.cpp outletBC.cpp utils.cpp io.cpp \
		       dgNonlinearForm.cpp gradients.cpp gradNonLinearForm.cpp quasimagnetostatic.cpp tps.cpp chemistry.cpp \
                       reaction.cpp collision_integrals.cpp argon_transport.cpp source_term.cpp gpu_constructor.cpp \
                       independent_coupling.cpp cycle_avg_joule_coupling.cpp table.cpp radiation.cpp lte_mixture.cpp \
                       lte_transport_properties.cpp mixing_length_transport.cpp tps2Boltzmann.cpp  M2ulPhyS2Boltzmann.cpp \
                       pybindings.cpp gslib_interpolator.cpp loMach.cpp loMachIO.cpp loMach_options.cpp calorically_perfect.cpp \
	               thermo_chem_base.cpp split_flow_base.cpp tomboulides.cpp dirichlet_bc_helper.cpp \
                       sponge_base.cpp geometricSponge.cpp gaussianInterpExtData.cpp turb_model_base.cpp \
                       algebraicSubgridModels.cpp algebraic_rans.cpp mesh_base.cpp lte_thermo_chem.cpp cases.cpp \
                       reactingFlow.cpp zetaModel.cpp

mfem_extra_sources   = ../utils/mfem_extras/pfem_extras.cpp

headers              = averaging.hpp equation_of_state.hpp transport_properties.hpp forcing_terms.hpp mpi_groups.hpp \
		       run_configuration.hpp BCintegrator.hpp faceGradientIntegration.hpp inletBC.hpp outletBC.hpp \
	               BoundaryCondition.hpp face_integrator.hpp M2ulPhyS.hpp rhs_operator.hpp \
	               wallBC.hpp domain_integrator.hpp fluxes.hpp masa_handler.hpp riemann_solver.hpp \
		       dgNonlinearForm.hpp gradNonLinearForm.hpp dataStructures.hpp utils.hpp io.hpp em_options.hpp \
		       quasimagnetostatic.hpp gradients.hpp logger.hpp solver.hpp tps.hpp chemistry.hpp reaction.hpp \
	               collision_integrals.hpp argon_transport.hpp source_term.hpp tps_mfem_wrap.hpp gpu_constructor.hpp \
                       independent_coupling.hpp cycle_avg_joule_coupling.hpp table.hpp radiation.hpp lte_mixture.hpp \
                       lte_transport_properties.hpp mixing_length_transport.hpp tps2Boltzmann.hpp gslib_interpolator.hpp \
                       loMach.hpp loMach_options.hpp calorically_perfect.hpp \
		       thermo_chem_base.hpp split_flow_base.hpp tomboulides.hpp dirichlet_bc_helper.hpp \
                       sponge_base.hpp geometricSponge.hpp externalData_base.hpp gaussianInterpExtData.hpp \
                       turb_model_base.hpp algebraicSubgridModels.hpp algebraic_rans.hpp mesh_base.hpp \
                       lte_thermo_chem.hpp cases.hpp reactingFlow.hpp zetaModel.hpp

mfem_extra_headers   = ../utils/mfem_extras/pfem_extras.hpp

## noinst_LIBRARIES     = libtps.a
## libtps_a_SOURCES     = $(cxx_sources) $(mfem_extra_sources) $(headers) $(mfem_extra_headers)

lib_LTLIBRARIES      = libtps.la
libtps_la_SOURCES    = $(cxx_sources) $(mfem_extra_sources) $(headers) $(mfem_extra_headers)
libtps_la_LIBADD     = $(MFEM_LIBS)
libtps_la_LIBADD    += $(HDF5_LIBS)
libtps_la_LIBADD    += $(GRVY_LIBS)

libtps_la_LDFLAGS   =

if SLURM_ENABLED
libtps_la_LIBADD    += -lslurm
endif

if CUDA_ENABLED
tps_LDFLAGS         += $(CUDA_LDFLAGS)
# object generated by nvcc --device-link (see below)
libtps_la_LIBADD    += tmp_cuda_object.lo
libtps_la_LIBADD    += $(CUDA_LDFLAGS) -lcuda -lcusparse

# Custom rule below forces nvcc invocation with --device-link. This
# step is required for cuda builds using -dc option at compile and then
# linking against shared lib, as we do here for tps.  See
#
# https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#using-separate-compilation-in-cuda
# https://developer.nvidia.com/blog/separate-compilation-linking-cuda-device-code/
#
# Known issues:
# 1) Only works for shared builds b/c we assume .libs/*.o are the only objects
# 2) Handling of objects from mfem_extra_source is brittle (only correct for single object pfem_extras.o)
# 3) Assumes .libs dir exists, but libtool will use _libs if .libs not allowed by filesystem (only affects windows?)
#
libtool_cxx_objects = $(cxx_sources:.cpp=.lo)
libtool_objects = $(libtool_cxx_objects) $(mfem_extra_sources:.cpp=.lo)
obj_list = $(libtool_cxx_objects:.lo=.o)
raw_objects = `for f in $(obj_list); do echo .libs/$$f; done`
raw_objects += ../utils/mfem_extras/.libs/pfem_extras.o

tmp_cuda_object.lo: $(libtool_objects)
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \
	$(CXX) -dlink -Xcompiler=-fPIC $(CUDA_LDFLAGS) $(raw_objects) -o $@
endif

if HIP_ENABLED
libtps_la_LIBADD    += $(HIP_LDFLAGS)
# Need link to have -fgpu-rdc.  Protect with -Xcompiler to libtool does not strip.
libtps_la_LDFLAGS += -Xcompiler -fgpu-rdc -Xcompiler -Wno-unused-command-line-argument
endif

if MASA_ENABLED
libtps_la_LIBADD += $(MASA_LIBS)
endif

if GSL_ENABLED
libtps_la_LIBADD += $(GSL_LIBS)
endif


# Python wrapper for C++ solver library
### pyexec_LTLIBRARIES   = pytps.la
### pytps_la_SOURCES     = pytps.cpp
### pytps_la_LIBADD      = -L$(BOOST_LIB) -lboost_python36 -lpython3.6m libtps.la
### pytps_la_LDFLAGS     = -avoid-version -module
### #pytps_la_DEPENDENCIES  = libtps.la
### AM_CPPFLAGS         += -I/usr/include/python3.6m

#---------------------------------
# Linting/style target(s)
#---------------------------------

enforcestyle:
	@echo ""
	@echo "------------------------------------------------------"
	@echo "Applying source code style updates using clang-format"
	@echo "------------------------------------------------------"
	@echo ""
#	@$(top_srcdir)/utils/cpplint/cpplint.py --output=sed $(headers) $(cxx_sources) main.cpp | bash
#	astyle --project $(headers) $(cxx_sources) main.cpp
#	clang-format -i $(headers) $(cxx_sources) main.cpp
	@cd $(top_srcdir)/src && clang-format -i $(headers) $(cxx_sources) main.cpp




style:
	@echo ""
	@echo "-------------------------------------------"
	@echo "Checking source code style using cpplint.py"
	@echo "-------------------------------------------"
	@echo ""
#	@$(top_srcdir)/utils/cpplint/cpplint.py $(headers) $(cxx_sources) main.cpp
	@cd $(top_srcdir)/src && $(abs_top_srcdir)/utils/cpplint/cpplint.py $(headers) $(cxx_sources) main.cpp

#---------------------------------
# Embedded license header support
#---------------------------------
license:
	@echo 'Running license update tool for src files'
	@$(top_srcdir)/utils/update_license.pl -S=$(top_srcdir)/src $(top_srcdir)/LICENSE \
		 $(headers) $(cxx_sources) main.cpp

#---------------------------------
# doxygen documentation
#---------------------------------
doc:
	@echo ""
	@echo "-------------------------------------------"
	@echo "Generating doxygen documentation           "
	@echo "-------------------------------------------"
	@echo ""
	@cd $(top_srcdir) && $(DOXYGEN) $(abs_top_builddir)/doc/Doxyfile
