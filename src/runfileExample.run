# -*- mode: sh -*-
# Example Runfile

# Mesh file
MESH square_periodic_mesh.msh

# output file name
# extensions will be added by program
OUTPUT_NAME euler_output

# Enable restart from previous solution.
RESTART_CYCLE

# Flag to support restarting on different processor count [mode]:
#   write: dump serial restart file
#   read: restart from serial restart
RESTART_SERIAL [mode]

#-------------------------
# Job management controls
#-------------------------

# enable periodic slurm check
ENABLE_AUTORESTART
# threshold time in seconds, if remaining time is below this
# value, code will save restart files and terminate with exit code=10
RM_THRESHOLD 1000
# iteration frequency for how often to check
RM_CHECK_FREQUENCY 500

# Computation of mean and velocity RMS
# CALC_MEAN_RMS startIter sampleInterval
# computes mean and RMS starting from iter start iter
# and adds a new value every sampleInterval iterations
CALC_MEAN_RMS 12400 20

# whether to dump mean values every ITERS_OUT for paraview; if not set,
# only the current value will be preserved.
SAVE_MEAN_HIST

# if simulation is to restart computing mean
CONTINUE_MEAN_CALC

# Polynomial order
POL_ORDER 3

# Restart from solution of AUX_ORDER
# Auxiliary order retreived from HD5 files
RESTART_FROM_AUX

# Integration rule (quadrature)
# 0 -> Gauss-Legendre
# 1 -> Gauss-Lobatto
INT_RULE 1

# Basis type
# 0 -> Gauss-Legendre
# 1 -> Gauss-Lobatto
BASIS_TYPE 1

# CFL number
CFL 0.12

# When specified the simulation will run with the 
# initially computed time-step
DT_CONSTANT

# Max num of iters
NMAX 10500

# output interval in num. of iters.
ITERS_OUT 100

# Use Roe-type Riemann solver
# 0 -> Lax-Friedrich; 1 -> Roe 
USE_ROE 1

# Use Summation by parts operators
# 0 -> no, 1 -> yes
IS_SBP 1

# Time integrator
#  1: ForwardEulerSolver
#  2: RK2Solver(1.0)
#  3: RK3SSPSolver
#  4: RK4Solver
#  6: RK6Solver
TIME_INTEGRATOR 4

# Working fluid
# for DRY_AIR -> 0
FLUID 0

# Factor that multiplies fluid viscosity
VISC_MULT 45000.

# Bulk viscosity factor. Bulk viscosity is calculated as 
# dynamic_viscosity (accounting for visc_mult) times bulk_visc
# i.e., visc(sutherland)*visc_mult*bulk_visc
BULK_VISC_MULT 5.

# Reference length
REF_LENGTH 1.

# equations to be solved. Options thus far
# EULER        -> 0
# NS           -> 1
# NS_PASSIVE   -> 2
EQ_SYSTEM 0

# Constant initial conditions
# Can be removed at will
INIT_RHO 1.2
INIT_RHOVX 30.
INIT_RHOVY 0.
INIT_RHOVZ 0.
INIT_P 101300

# Additional imposed fixed pressure gradient
# GRAD_PRESSURE dpx dpy dpz
GRAD_PRESSURE 8 0 0

# The following four keywords define two planes in which
# a linearly varying viscosity can be defined between these two.
# The planes are defined by the normal and one point being the 
# normal equal for both planes. The visc ratio will vary linearly
# from 0 to VISC_RATIO from the plane defined by PLANE_PINIT and 
# the plane defined by PLANE_P0. This is intended to help in 
# problematic boundary conditions.
PLANE_NORM n1 n2 n3
PLANE_P0 x0 y0 z0
PLANE_PINIT xi yi zi
VISC_RATIO 50.

# Inlet Boundary Conditions
# types:
# 0 -> Subsonic Inlet Specified with dens. and Vel(3)
# 1 -> Non-reflect. sub. Inlet Specified with dens. and Vel(3)
# 2 -> Non-reflect. sub. Inlet Specified with Vel(3). Keeps entropy constant
#INLET patchNum type dens vx vy vz
INLET 5 0 1.2 30 0 0

# Outlet Boundary Conditions
# types:
# 0 -> Subsonic outlet Specified with P 
# 1 -> Non-reflect. sub. outlet Specified with P 
# 2 -> Non-reflecting mass flow outlet
# 3 -> Non-reflecting point-based mass flow outlet
#OUTLET patchNum type press
OUTLET 5 0 101300

# Wall Boundary Conditions
# types:
# 0 -> Inviscid wall
# 1 -> Viscous adiabatic
# 2 -> Viscous iso-thermal. Requires temperature
# WALL patchNum type
WALL 8 0
WALL 9 2 430
